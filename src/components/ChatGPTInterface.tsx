import { useState, useRef, useEffect } from "react";
import { Send, User, Bot, Scale, FileText, AlertCircle, CheckCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { supabase } from "@/integrations/supabase/client";
import { chainOperaApi } from "@/services/chainOperaApi";
import { useToast } from "@/hooks/use-toast";
import { motion, AnimatePresence } from "framer-motion";

interface Message {
  id: string;
  content: string;
  role: "user" | "assistant";
  timestamp: Date;
}

interface ChatGPTInterfaceProps {
  className?: string;
  initialMessage?: string;
}

const ChatGPTInterface = ({ className = "", initialMessage = "" }: ChatGPTInterfaceProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const { toast } = useToast();

  // Handle initial message
  useEffect(() => {
    if (initialMessage && initialMessage.trim()) {
      setInputMessage(initialMessage);
      // Auto-send the initial message after a short delay
      setTimeout(() => {
        // Create the message directly here to avoid dependency issues
        const newUserMessage: Message = {
          id: Date.now().toString(),
          content: initialMessage,
          role: "user",
          timestamp: new Date(),
        };

        setMessages(prev => [...prev, newUserMessage]);
        setInputMessage("");
        setIsTyping(true);

        // Call the API
        (async () => {
          try {
            let response;
            try {
              const { data, error } = await supabase.functions.invoke('chat-with-ai', {
                body: { message: initialMessage }
              });

              if (error) throw error;
              response = data;
            } catch (supabaseError) {
              console.log('Supabase function failed, trying direct API:', supabaseError);
              response = await chainOperaApi.sendMessage(initialMessage);
            }

            const aiResponse: Message = {
              id: (Date.now() + 1).toString(),
              content: response.response,
              role: "assistant",
              timestamp: new Date(),
            };
            
            setMessages(prev => [...prev, aiResponse]);

            if (response.source === 'TensorOpera AI (Gemini 2.0 Flash)') {
              toast({
                title: "✅ TensorOpera AI Connected",
                description: "Response generated by Gemini 2.0 Flash",
                duration: 3000,
              });
            }

          } catch (error) {
            console.error('Error calling AI:', error);
            
            const fallbackResponse: Message = {
              id: (Date.now() + 1).toString(),
              content: `Thank you for your legal question: "${initialMessage}". I'm currently experiencing connectivity issues with the TensorOpera AI platform. Please try again in a moment.`,
              role: "assistant",
              timestamp: new Date(),
            };
            
            setMessages(prev => [...prev, fallbackResponse]);
            
            toast({
              title: "Connection Issue",
              description: "Unable to connect to TensorOpera AI. Please try again.",
              variant: "destructive",
              duration: 5000,
            });
          } finally {
            setIsTyping(false);
          }
        })();
      }, 500);
    }
  }, [initialMessage]); // Remove handleSendMessage from dependencies

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (messageToSend?: string) => {
    const messageContent = messageToSend || inputMessage;
    if (!messageContent.trim()) return;

    const newUserMessage: Message = {
      id: Date.now().toString(),
      content: messageContent,
      role: "user",
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, newUserMessage]);
    const currentMessage = messageContent;
    setInputMessage("");
    setIsTyping(true);

    try {
      // Try Supabase function first, then fallback to direct API
      let response;
      try {
        const { data, error } = await supabase.functions.invoke('chat-with-ai', {
          body: { message: currentMessage }
        });

        if (error) throw error;
        response = data;
      } catch (supabaseError) {
        console.log('Supabase function failed, trying direct API:', supabaseError);
        response = await chainOperaApi.sendMessage(currentMessage);
      }

      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: response.response,
        role: "assistant",
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, aiResponse]);

      // Show success toast for ChainOpera responses
      if (response.source === 'ChainOpera AI Platform') {
        toast({
          title: "✅ ChainOpera AI Connected",
          description: "Response generated by decentralized AI network",
          duration: 3000,
        });
      }

    } catch (error) {
      console.error('Error calling AI:', error);

      // Final fallback
      const fallbackResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: `Thank you for your legal question: "${currentMessage}". I'm currently experiencing connectivity issues with the ChainOpera AI platform. Please try again in a moment, or check your internet connection.`,
        role: "assistant",
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, fallbackResponse]);

      toast({
        title: "Connection Issue",
        description: "Unable to connect to ChainOpera AI. Please try again.",
        variant: "destructive",
        duration: 5000,
      });
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };



  return (
    <div className={`flex flex-col h-full max-w-5xl mx-auto ${className}`}>
      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto space-y-4 md:space-y-6 px-3 md:px-4 py-4 md:py-6 min-h-0">
        <AnimatePresence>
          {messages.length === 0 ? (
            <motion.div
              className="text-center py-8 md:py-16"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <div className="mb-8">
                <div className="w-12 h-12 md:w-16 md:h-16 mx-auto mb-4 bg-gradient-to-br from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center">
                  <Scale className="w-6 h-6 md:w-8 md:h-8 text-white" />
                </div>
                <h2 className="text-xl md:text-2xl font-bold mb-2 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Welcome to Lawgic AI
                </h2>
                <p className="text-sm md:text-base text-muted-foreground mb-4 md:mb-6 px-4">
                  Your AI Legal Assistant powered by TensorOpera's Gemini 2.0 Flash
                </p>
                <Badge variant="secondary" className="mb-6 md:mb-8">
                  <CheckCircle className="w-3 h-3 mr-1" />
                  Powered by TensorOpera
                </Badge>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-4 max-w-2xl mx-auto px-4">
                <div className="p-3 md:p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors">
                  <FileText className="w-5 h-5 md:w-6 md:h-6 text-blue-600 mb-2 mx-auto md:mx-0" />
                  <h4 className="font-semibold mb-1 text-sm md:text-base">Contract Review</h4>
                  <p className="text-xs md:text-sm text-muted-foreground">Get help reviewing and understanding legal contracts</p>
                </div>
                <div className="p-3 md:p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors">
                  <Scale className="w-5 h-5 md:w-6 md:h-6 text-purple-600 mb-2 mx-auto md:mx-0" />
                  <h4 className="font-semibold mb-1 text-sm md:text-base">Legal Research</h4>
                  <p className="text-xs md:text-sm text-muted-foreground">Research case law and legal precedents</p>
                </div>
                <div className="p-3 md:p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors">
                  <AlertCircle className="w-5 h-5 md:w-6 md:h-6 text-orange-600 mb-2 mx-auto md:mx-0" />
                  <h4 className="font-semibold mb-1 text-sm md:text-base">Compliance Guidance</h4>
                  <p className="text-xs md:text-sm text-muted-foreground">Understand regulatory requirements</p>
                </div>
                <div className="p-3 md:p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors">
                  <Bot className="w-5 h-5 md:w-6 md:h-6 text-green-600 mb-2 mx-auto md:mx-0" />
                  <h4 className="font-semibold mb-1 text-sm md:text-base">Legal Advice</h4>
                  <p className="text-xs md:text-sm text-muted-foreground">Get general legal guidance and information</p>
                </div>
              </div>

              <p className="text-xs text-muted-foreground mt-6 md:mt-8 max-w-md mx-auto px-4">
                Start by asking any legal question. Remember, this provides general legal information only and is not a substitute for professional legal advice.
              </p>
            </motion.div>
          ) : (
            messages.map((message) => (
              <motion.div
                key={message.id}
                className={`flex gap-4 ${message.role === "user" ? "justify-end" : "justify-start"}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                {message.role === "assistant" && (
                  <Avatar className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 flex-shrink-0">
                    <AvatarFallback className="bg-gradient-to-br from-blue-600 to-purple-600 text-white">
                      <Scale className="w-5 h-5" />
                    </AvatarFallback>
                  </Avatar>
                )}

                <div className={`max-w-[90%] md:max-w-[85%] rounded-2xl px-3 md:px-5 py-3 md:py-4 ${message.role === "user"
                  ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg"
                  : "bg-white dark:bg-gray-800 text-foreground border border-border shadow-sm"
                  }`}>
                  <div className="prose prose-sm max-w-none dark:prose-invert prose-headings:text-foreground prose-p:text-foreground prose-strong:text-foreground prose-code:text-foreground prose-pre:bg-muted prose-pre:text-foreground">
                    <div
                      className="text-sm leading-relaxed"
                      dangerouslySetInnerHTML={{
                        __html: message.content
                          // Code blocks first (to avoid conflicts)
                          .replace(/```([\s\S]*?)```/g, '<pre class="bg-muted p-3 rounded-lg overflow-x-auto my-2"><code>$1</code></pre>')
                          // Inline code
                          .replace(/`(.*?)`/g, '<code class="bg-muted px-1 py-0.5 rounded text-xs">$1</code>')
                          // Bold text
                          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                          // Italic text
                          .replace(/\*(.*?)\*/g, '<em>$1</em>')
                          // Headers first
                          .replace(/^### (.+)$/gm, '<h3 class="text-lg font-semibold mt-4 mb-2">$1</h3>')
                          .replace(/^## (.+)$/gm, '<h2 class="text-xl font-semibold mt-4 mb-2">$1</h2>')
                          .replace(/^# (.+)$/gm, '<h1 class="text-2xl font-bold mt-4 mb-2">$1</h1>')
                          // Lists
                          .replace(/((?:^\d+\.\s.+$\n?)+)/gm, '<ol class="list-decimal ml-6 mb-4 space-y-1">$1</ol>')
                          .replace(/((?:^[-•*]\s.+$\n?)+)/gm, '<ul class="list-disc ml-6 mb-4 space-y-1">$1</ul>')
                          .replace(/^\d+\.\s(.+)$/gm, '<li>$1</li>')
                          .replace(/^[-•*]\s(.+)$/gm, '<li>$1</li>')
                          // Paragraphs
                          .replace(/\n\n/g, '</p><p class="mb-4">')
                          .replace(/\n/g, '<br>')
                          // Wrap content in paragraphs
                          .replace(/^(?!<[h|p|l|u|o|d])(.+)/, '<p class="mb-4">$1</p>')
                      }}
                    />
                  </div>
                  {message.role === "assistant" && (
                    <div className="flex items-center gap-2 mt-3 pt-3 border-t border-border/50">
                      <Badge variant="outline" className="text-xs">
                        <CheckCircle className="w-3 h-3 mr-1" />
                        ChainOpera AI
                      </Badge>
                      <span className="text-xs text-muted-foreground">
                        {new Date(message.timestamp).toLocaleTimeString()}
                      </span>
                    </div>
                  )}
                </div>

                {message.role === "user" && (
                  <Avatar className="w-10 h-10 bg-gradient-to-br from-gray-600 to-gray-800 flex-shrink-0">
                    <AvatarFallback className="bg-gradient-to-br from-gray-600 to-gray-800 text-white">
                      <User className="w-5 h-5" />
                    </AvatarFallback>
                  </Avatar>
                )}
              </motion.div>
            ))
          )}
        </AnimatePresence>

        {/* Typing Indicator */}
        <AnimatePresence>
          {isTyping && (
            <motion.div
              className="flex gap-4 justify-start"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Avatar className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 flex-shrink-0">
                <AvatarFallback className="bg-gradient-to-br from-blue-600 to-purple-600 text-white">
                  <Scale className="w-5 h-5" />
                </AvatarFallback>
              </Avatar>
              <div className="bg-white dark:bg-gray-800 border border-border rounded-2xl px-5 py-4 shadow-sm">
                <div className="flex space-x-1 items-center">
                  <motion.div
                    className="w-2 h-2 bg-blue-600 rounded-full"
                    animate={{ scale: [1, 1.3, 1] }}
                    transition={{ duration: 1.2, repeat: Infinity, delay: 0 }}
                  />
                  <motion.div
                    className="w-2 h-2 bg-purple-600 rounded-full"
                    animate={{ scale: [1, 1.3, 1] }}
                    transition={{ duration: 1.2, repeat: Infinity, delay: 0.2 }}
                  />
                  <motion.div
                    className="w-2 h-2 bg-blue-600 rounded-full"
                    animate={{ scale: [1, 1.3, 1] }}
                    transition={{ duration: 1.2, repeat: Infinity, delay: 0.4 }}
                  />
                  <span className="text-sm text-muted-foreground ml-3">Lawgic is analyzing your question...</span>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area - Fixed at bottom */}
      <div className="sticky bottom-0 border-t border-border bg-background/95 backdrop-blur-sm px-3 md:px-4 py-4 md:py-6 z-10">
        <div className="relative max-w-4xl mx-auto">
          <div className="relative">
            <Textarea
              ref={textareaRef}
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask Lawgic any legal question... (e.g., 'What should I know about employment contracts?')"
              className="min-h-[60px] md:min-h-[80px] max-h-[150px] md:max-h-[200px] pr-12 md:pr-14 pl-3 md:pl-4 py-3 md:py-4 resize-none border-2 border-border focus:border-blue-500 rounded-xl text-sm shadow-lg bg-background"
              disabled={isTyping}
            />
            <Button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              size="icon"
              className="absolute right-2 md:right-3 bottom-2 md:bottom-3 h-8 w-8 md:h-10 md:w-10 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 rounded-lg shadow-lg transition-all duration-200"
            >
              <Send className="w-3 h-3 md:w-4 md:h-4" />
            </Button>
          </div>
        </div>

        <div className="text-center mt-3 md:mt-4 space-y-1 md:space-y-2">
          <div className="flex items-center justify-center gap-2 text-xs text-muted-foreground">
            <CheckCircle className="w-3 h-3 text-green-600" />
            <span className="hidden sm:inline">Powered by TensorOpera's Gemini 2.0 Flash</span>
            <span className="sm:hidden">Powered by TensorOpera AI</span>
          </div>
          <div className="text-xs text-muted-foreground px-2">
            <AlertCircle className="w-3 h-3 inline mr-1" />
            <span className="hidden sm:inline">This provides general legal information only and is not a substitute for professional legal advice</span>
            <span className="sm:hidden">General legal information only</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatGPTInterface;